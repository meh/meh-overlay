diff --git a/protocols/twitter/twitter.c b/protocols/twitter/twitter.c
index dbe9b98..8604c3e 100644
--- a/protocols/twitter/twitter.c
+++ b/protocols/twitter/twitter.c
@@ -29,12 +29,12 @@
 #include "url.h"
 
 #define twitter_msg( ic, fmt... ) \
-	do {                                                        \
-		struct twitter_data *td = ic->proto_data;           \
-		if( td->home_timeline_gc )                          \
-			imcb_chat_log( td->home_timeline_gc, fmt ); \
-		else                                                \
-			imcb_log( ic, fmt );                        \
+	do {                                            \
+		struct twitter_data *td = ic->proto_data;   \
+		if( td->timeline_gc )                       \
+			imcb_chat_log( td->timeline_gc, fmt );  \
+		else                                        \
+			imcb_log( ic, fmt );                    \
 	} while( 0 );
 		
 GSList *twitter_connections = NULL;
@@ -51,7 +51,7 @@ gboolean twitter_main_loop(gpointer data, gint fd, b_input_condition cond)
 		return 0;
 
 	// Do stuff..
-	twitter_get_home_timeline(ic, -1);
+	twitter_get_timeline(ic, -1);
 
 	// If we are still logged in run this function again after timeout.
 	return (ic->flags & OPT_LOGGED_IN) == OPT_LOGGED_IN;
@@ -68,7 +68,7 @@ static void twitter_main_loop_start( struct im_connection *ic )
 
 	// Queue the main_loop
 	// Save the return value, so we can remove the timeout on logout.
-	td->main_loop_id = b_timeout_add(60000, twitter_main_loop, ic);
+	td->main_loop_id = b_timeout_add(set_getint(&ic->acc->set, "fetch_every") * 1000, twitter_main_loop, ic);
 }
 
 static void twitter_oauth_start( struct im_connection *ic );
@@ -76,7 +76,9 @@ static void twitter_oauth_start( struct im_connection *ic );
 void twitter_login_finish( struct im_connection *ic )
 {
 	struct twitter_data *td = ic->proto_data;
-	
+
+    td->timeline_doing = FALSE;
+
 	if( set_getbool( &ic->acc->set, "oauth" ) && !td->oauth_info )
 		twitter_oauth_start( ic );
 	else if( g_strcasecmp( set_getstr( &ic->acc->set, "mode" ), "one" ) != 0 &&
@@ -211,6 +213,9 @@ static void twitter_init( account_t *acc )
 	}
 	
 	s = set_add( &acc->set, "auto_reply_timeout", "10800", set_eval_int, acc );
+
+    s = set_add( &acc->set, "fetch_every", "60", set_eval_int, acc );
+	s->flags |= ACC_SET_OFFLINE_ONLY;
 	
 	s = set_add( &acc->set, "base_url", def_url, NULL, acc );
 	s->flags |= ACC_SET_OFFLINE_ONLY;
@@ -218,6 +223,10 @@ static void twitter_init( account_t *acc )
 	s = set_add( &acc->set, "commands", "true", set_eval_bool, acc );
 	
 	s = set_add( &acc->set, "message_length", "140", set_eval_int, acc );
+
+    s = set_add( &acc->set, "include_mentions", "true", set_eval_bool, acc );
+
+    s = set_add( &acc->set, "enable_highlight_filtering", "false", set_eval_bool, acc );
 	
 	s = set_add( &acc->set, "mode", "chat", set_eval_mode, acc );
 	s->flags |= ACC_SET_OFFLINE_ONLY;
@@ -286,8 +295,8 @@ static void twitter_logout( struct im_connection *ic )
 	// Remove the main_loop function from the function queue.
 	b_event_remove(td->main_loop_id);
 
-	if(td->home_timeline_gc)
-		imcb_chat_free(td->home_timeline_gc);
+	if(td->timeline_gc)
+		imcb_chat_free(td->timeline_gc);
 
 	if( td )
 	{
@@ -377,13 +386,13 @@ static void twitter_chat_leave( struct groupchat *c )
 {
 	struct twitter_data *td = c->ic->proto_data;
 	
-	if( c != td->home_timeline_gc )
+	if( c != td->timeline_gc )
 		return; /* WTF? */
 	
 	/* If the user leaves the channel: Fine. Rejoin him/her once new
 	   tweets come in. */
-	imcb_chat_free(td->home_timeline_gc);
-	td->home_timeline_gc = NULL;
+	imcb_chat_free(td->timeline_gc);
+	td->timeline_gc = NULL;
 }
 
 static void twitter_keepalive( struct im_connection *ic )
diff --git a/protocols/twitter/twitter.h b/protocols/twitter/twitter.h
index 98f1683..0ebf996 100644
--- a/protocols/twitter/twitter.h
+++ b/protocols/twitter/twitter.h
@@ -42,10 +42,17 @@ struct twitter_data
 	char* user;
 	char* pass;
 	struct oauth_info *oauth_info;
-	guint64 home_timeline_id;
+
+    gboolean timeline_doing;
+    gpointer home_timeline_obj;
+    gboolean home_timeline_done;
+    gpointer mentions_obj;
+    gboolean mentions_done;
+
+	guint64 timeline_id;
 	guint64 last_status_id; /* For undo */
 	gint main_loop_id;
-	struct groupchat *home_timeline_gc;
+	struct groupchat *timeline_gc;
 	gint http_fails;
 	twitter_flags_t flags;
 	
diff --git a/protocols/twitter/twitter_lib.c b/protocols/twitter/twitter_lib.c
index c8e4e76..bd590d1 100644
--- a/protocols/twitter/twitter_lib.c
+++ b/protocols/twitter/twitter_lib.c
@@ -78,17 +78,20 @@ static void txu_free(struct twitter_xml_user *txu)
 {
 	if (txu == NULL)
 		return;
+
 	g_free(txu->name);
 	g_free(txu->screen_name);
 	g_free(txu);
 }
 
-
 /**
  * Frees a twitter_xml_status struct.
  */
 static void txs_free(struct twitter_xml_status *txs)
 {
+    if (txs == NULL)
+        return;
+
 	g_free(txs->text);
 	txu_free(txs->user);
 	g_free(txs);
@@ -103,23 +106,47 @@ static void txl_free(struct twitter_xml_list *txl)
 	GSList *l;
 	if (txl == NULL)
 		return;
-	for ( l = txl->list; l ; l = g_slist_next(l) )
-		if (txl->type == TXL_STATUS)
+
+	for ( l = txl->list; l ; l = g_slist_next(l) ) {
+		if (txl->type == TXL_STATUS) {
 			txs_free((struct twitter_xml_status *)l->data);
-		else if (txl->type == TXL_ID)
+        }
+		else if (txl->type == TXL_ID) {
 			g_free(l->data);
+        }
+    }
+
 	g_slist_free(txl->list);
 	g_free(txl);
 }
 
 /**
- * Add a buddy if it is not allready added, set the status to logged in.
+ * Compare status elements
+ */
+static gint twitter_compare_elements (gconstpointer a, gconstpointer b)
+{
+    struct twitter_xml_status *a_status = (struct twitter_xml_status *) a;
+    struct twitter_xml_status *b_status = (struct twitter_xml_status *) b;
+
+    if (a_status->created_at < b_status->created_at) {
+        return -1;
+    }
+    else if (a_status->created_at > b_status->created_at) {
+        return 1;
+    }
+    else {
+        return 0;
+    }
+}
+
+/**
+ * Add a buddy if it is not already added, set the status to logged in.
  */
 static void twitter_add_buddy(struct im_connection *ic, char *name, const char *fullname)
 {
 	struct twitter_data *td = ic->proto_data;
 
-	// Check if the buddy is allready in the buddy list.
+	// Check if the buddy is already in the buddy list.
 	if (!bee_user_by_handle( ic->bee, ic, name ))
 	{
 		char *mode = set_getstr(&ic->acc->set, "mode");
@@ -132,7 +159,7 @@ static void twitter_add_buddy(struct im_connection *ic, char *name, const char *
 			/* Necessary so that nicks always get translated to the
 			   exact Twitter username. */
 			imcb_buddy_nick_hint( ic, name, name );
-			imcb_chat_add_buddy( td->home_timeline_gc, name );
+			imcb_chat_add_buddy( td->timeline_gc, name );
 		}
 		else if (g_strcasecmp(mode, "many") == 0)
 			imcb_buddy_status( ic, name, OPT_LOGGED_IN, NULL, NULL );
@@ -476,31 +503,6 @@ static xt_status twitter_xt_get_status_list( struct im_connection *ic, struct xt
 	return XT_HANDLED;
 }
 
-static void twitter_http_get_home_timeline(struct http_request *req);
-
-/**
- * Get the timeline.
- */
-void twitter_get_home_timeline(struct im_connection *ic, gint64 next_cursor)
-{
-	struct twitter_data *td = ic->proto_data;
-
-	char* args[4];
-	args[0] = "cursor";
-	args[1] = g_strdup_printf ("%lld", (long long) next_cursor);
-	if (td->home_timeline_id) {
-		args[2] = "since_id";
-		args[3] = g_strdup_printf ("%llu", (long long unsigned int) td->home_timeline_id);
-	}
-
-	twitter_http(ic, TWITTER_HOME_TIMELINE_URL, twitter_http_get_home_timeline, ic, 0, args, td->home_timeline_id ? 4 : 2);
-
-	g_free(args[1]);
-	if (td->home_timeline_id) {
-		g_free(args[3]);
-	}
-}
-
 static void twitter_groupchat_init(struct im_connection *ic)
 {
 	char *name_hint;
@@ -508,7 +510,7 @@ static void twitter_groupchat_init(struct im_connection *ic)
 	struct twitter_data *td = ic->proto_data;
 	GSList *l;
 	
-	td->home_timeline_gc = gc = imcb_chat_new( ic, "home/timeline" );
+	td->timeline_gc = gc = imcb_chat_new( ic, "twitter/timeline" );
 	
 	name_hint = g_strdup_printf( "%s_%s", td->prefix, ic->acc->user );
 	imcb_chat_name_hint( gc, name_hint );
@@ -518,7 +520,7 @@ static void twitter_groupchat_init(struct im_connection *ic)
 	{
 		bee_user_t *bu = l->data;
 		if( bu->ic == ic )
-			imcb_chat_add_buddy( td->home_timeline_gc, bu->handle );
+			imcb_chat_add_buddy( td->timeline_gc, bu->handle );
 	}
 }
 
@@ -531,34 +533,60 @@ static void twitter_groupchat(struct im_connection *ic, GSList *list)
 	GSList *l = NULL;
 	struct twitter_xml_status *status;
 	struct groupchat *gc;
+    char* text;
+    guint64 last_id = 0;
+    size_t length;
+    gboolean enable_highlight_filtering = set_getbool(&ic->acc->set, "enable_highlight_filtering");
 
 	// Create a new groupchat if it does not exsist.
-	if (!td->home_timeline_gc)
+	if (!td->timeline_gc)
 		twitter_groupchat_init(ic);
 	
-	gc = td->home_timeline_gc;
+	gc = td->timeline_gc;
 	if (!gc->joined)
 		imcb_chat_add_buddy( gc, ic->acc->user );
 
 	for ( l = list; l ; l = g_slist_next(l) )
 	{
 		status = l->data;
-		if (status->user == NULL || status->text == NULL)
+		if (status->user == NULL || status->text == NULL || last_id == status->id)
 			continue;
 
-		twitter_add_buddy(ic, status->user->screen_name, status->user->name);
-		
+        last_id = status->id;
+
 		strip_html(status->text);
 		
 		// Say it!
-		if (g_strcasecmp(td->user, status->user->screen_name) == 0)
+		if (g_strcasecmp(td->user, status->user->screen_name) == 0) {
 			imcb_chat_log (gc, "You: %s", status->text);
-		else
-			imcb_chat_msg (gc, status->user->screen_name, status->text, 0, status->created_at );
+        }
+		else {
+    		twitter_add_buddy(ic, status->user->screen_name, status->user->name);
+
+            if (enable_highlight_filtering) {
+                text = g_strdup_printf("@%s", td->user);
+
+                if (g_str_has_prefix(status->text, text)) {
+                    length = strlen(text); g_free(text);
+
+                    text = g_strdup_printf("%s%s", ic->acc->user, &status->text[length]);
+                }
+                else {
+                    text = g_strdup(status->text);
+                }
+
+    			imcb_chat_msg (gc, status->user->screen_name, text, 0, status->created_at );
+
+                g_free(text);
+            }
+            else {
+    			imcb_chat_msg (gc, status->user->screen_name, status->text, 0, status->created_at );
+            }
+        }
 		
-		// Update the home_timeline_id to hold the highest id, so that by the next request
-		// we won't pick up the updates allready in the list.
-		td->home_timeline_id = td->home_timeline_id < status->id ? status->id : td->home_timeline_id;
+		// Update the timeline_id to hold the highest id, so that by the next request
+		// we won't pick up the updates already in the list.
+		td->timeline_id = td->timeline_id < status->id ? status->id : td->timeline_id;
 	}
 }
 
@@ -572,6 +600,7 @@ static void twitter_private_message_chat(struct im_connection *ic, GSList *list)
 	struct twitter_xml_status *status;
 	char from[MAX_STRING];
 	gboolean mode_one;
+    guint64 last_id = 0;
 	
 	mode_one = g_strcasecmp( set_getstr( &ic->acc->set, "mode" ), "one" ) == 0;
 
@@ -586,6 +615,10 @@ static void twitter_private_message_chat(struct im_connection *ic, GSList *list)
 		char *text = NULL;
 		
 		status = l->data;
+		if (status->user == NULL || status->text == NULL || last_id == status->id)
+			continue;
+
+        last_id = status->id;
 		
 		strip_html( status->text );
 		if( mode_one )
@@ -599,14 +632,144 @@ static void twitter_private_message_chat(struct im_connection *ic, GSList *list)
 		                mode_one ? text : status->text,
 		                0, status->created_at );
 		
-		// Update the home_timeline_id to hold the highest id, so that by the next request
-		// we won't pick up the updates allready in the list.
-		td->home_timeline_id = td->home_timeline_id < status->id ? status->id : td->home_timeline_id;
+		// Update the timeline_id to hold the highest id, so that by the next request
+		// we won't pick up the updates already in the list.
+		td->timeline_id = td->timeline_id < status->id ? status->id : td->timeline_id;
 		
 		g_free( text );
 	}
 }
 
+static void twitter_http_get_home_timeline(struct http_request *req);
+static void twitter_http_get_mentions(struct http_request *req);
+
+/**
+ * Get the timeline with optionally mentions
+ */
+void twitter_get_timeline(struct im_connection *ic, gint64 next_cursor)
+{
+    struct twitter_data *td = ic->proto_data;
+    gboolean include_mentions = set_getbool(&ic->acc->set, "include_mentions");
+
+    if (td->timeline_doing) {
+        return;
+    }
+
+    td->timeline_doing = TRUE;
+
+    twitter_get_home_timeline(ic, next_cursor);
+
+    if (include_mentions) {
+        twitter_get_mentions(ic, next_cursor);
+    }
+}
+
+void twitter_flush_timeline(struct im_connection *ic)
+{
+    struct twitter_data *td = ic->proto_data;
+    gboolean include_mentions = set_getbool(&ic->acc->set, "include_mentions");
+    struct twitter_xml_list *home_timeline = td->home_timeline_obj;
+    struct twitter_xml_list *mentions = td->mentions_obj;
+    GSList *output = NULL;
+    GSList *l;
+
+    if (!td->home_timeline_done) {
+        return;
+    }
+
+    if (include_mentions && !td->mentions_done) {
+        return;
+    }
+
+    if (home_timeline && home_timeline->list) {
+        for (l = home_timeline->list; l ; l = g_slist_next(l)) {
+            output = g_slist_insert_sorted(output, l->data, twitter_compare_elements);
+        }
+    }
+
+    if (include_mentions && mentions && mentions->list) {
+        for (l = mentions->list; l ; l = g_slist_next(l)) {
+            if (output && twitter_compare_elements(l->data, output->data) < 0) {
+                continue;
+            }
+            
+            output = g_slist_insert_sorted(output, l->data, twitter_compare_elements);
+        }
+    }
+
+	// See if the user wants to see the messages in a groupchat window or as private messages.
+	if (g_strcasecmp(set_getstr(&ic->acc->set, "mode"), "chat") == 0)
+		twitter_groupchat(ic, output);
+	else
+		twitter_private_message_chat(ic, output);
+
+    g_slist_free(output);
+
+	if (home_timeline && home_timeline->list) {
+    	txl_free(home_timeline);
+    }
+
+    if (mentions && mentions->list) {
+        txl_free(mentions);
+    }
+
+    td->home_timeline_done = FALSE;
+    td->mentions_done = FALSE;
+    td->timeline_doing = FALSE;
+}
+
+/**
+ * Get the timeline.
+ */
+void twitter_get_home_timeline(struct im_connection *ic, gint64 next_cursor)
+{
+	struct twitter_data *td = ic->proto_data;
+
+    td->home_timeline_obj = NULL;
+    td->home_timeline_done = FALSE;
+
+	char* args[4];
+	args[0] = "cursor";
+	args[1] = g_strdup_printf ("%lld", (long long) next_cursor);
+	if (td->timeline_id) {
+		args[2] = "since_id";
+		args[3] = g_strdup_printf ("%llu", (long long unsigned int) td->timeline_id);
+	}
+
+	twitter_http(ic, TWITTER_HOME_TIMELINE_URL, twitter_http_get_home_timeline, ic, 0, args, td->timeline_id ? 4 : 2);
+
+	g_free(args[1]);
+	if (td->timeline_id) {
+		g_free(args[3]);
+	}
+}
+
+/**
+ * Get mentions.
+ */
+void twitter_get_mentions(struct im_connection *ic, gint64 next_cursor)
+{
+	struct twitter_data *td = ic->proto_data;
+
+    td->mentions_obj = NULL;
+    td->mentions_done = FALSE;
+
+	char* args[4];
+	args[0] = "cursor";
+	args[1] = g_strdup_printf ("%lld", (long long) next_cursor);
+	if (td->timeline_id) {
+		args[2] = "since_id";
+		args[3] = g_strdup_printf ("%llu", (long long unsigned int) td->timeline_id);
+	}
+
+	twitter_http(ic, TWITTER_MENTIONS_URL, twitter_http_get_mentions, ic, 0, args, td->timeline_id ? 4 : 2);
+
+	g_free(args[1]);
+	if (td->timeline_id) {
+		g_free(args[3]);
+	}
+}
+
 /**
  * Callback for getting the home timeline.
  */
@@ -634,7 +797,7 @@ static void twitter_http_get_home_timeline(struct http_request *req)
 	{
 		imcb_error( ic, "Authentication failure" );
 		imc_logout( ic, FALSE );
-		return;
+		goto end;
 	}
 	else
 	{
@@ -642,7 +805,7 @@ static void twitter_http_get_home_timeline(struct http_request *req)
 		if (++td->http_fails >= 5)
 			imcb_error(ic, "Could not retrieve " TWITTER_HOME_TIMELINE_URL ": %s", twitter_parse_error(req));
 		
-		return;
+		goto end;
 	}
 
 	txl = g_new0(struct twitter_xml_list, 1);
@@ -655,16 +818,68 @@ static void twitter_http_get_home_timeline(struct http_request *req)
 	twitter_xt_get_status_list(ic, parser->root, txl);
 	xt_free( parser );
 
-	// See if the user wants to see the messages in a groupchat window or as private messages.
-	if (txl->list == NULL)
-		;
-	else if (g_strcasecmp(set_getstr(&ic->acc->set, "mode"), "chat") == 0)
-		twitter_groupchat(ic, txl->list);
+    td->home_timeline_obj = txl;
+
+end:
+    td->home_timeline_done = TRUE;
+
+    twitter_flush_timeline(ic);
+}
+
+/**
+ * Callback for getting mentions.
+ */
+static void twitter_http_get_mentions(struct http_request *req)
+{
+	struct im_connection *ic = req->data;
+	struct twitter_data *td;
+	struct xt_parser *parser;
+	struct twitter_xml_list *txl;
+
+	// Check if the connection is still active.
+	if( !g_slist_find( twitter_connections, ic ) )
+		return;
+	
+	td = ic->proto_data;
+
+	// Check if the HTTP request went well.
+	if (req->status_code == 200)
+	{
+		td->http_fails = 0;
+		if (!(ic->flags & OPT_LOGGED_IN))
+			imcb_connected(ic);
+	}
+	else if (req->status_code == 401)
+	{
+		imcb_error( ic, "Authentication failure" );
+		imc_logout( ic, FALSE );
+        goto end;
+	}
 	else
-		twitter_private_message_chat(ic, txl->list);
+	{
+		// It didn't go well, output the error and return.
+		if (++td->http_fails >= 5)
+			imcb_error(ic, "Could not retrieve " TWITTER_MENTIONS_URL ": %s", twitter_parse_error(req));
+		
+        goto end;
+	}
 
-	// Free the structure.	
-	txl_free(txl);
+	txl = g_new0(struct twitter_xml_list, 1);
+	txl->list = NULL;
+
+	// Parse the data.
+	parser = xt_new( NULL, txl );
+	xt_feed( parser, req->reply_body, req->body_size );
+	// The root <statuses> node should hold the list of statuses <status>
+	twitter_xt_get_status_list(ic, parser->root, txl);
+	xt_free( parser );
+
+    td->mentions_obj = txl;
+
+end:
+    td->mentions_done = TRUE;
+
+    twitter_flush_timeline(ic);
 }
 
 /**
@@ -704,7 +919,7 @@ static void twitter_http_get_statuses_friends(struct http_request *req)
 		td->http_fails = 0;
 	}
 	
-	if( !td->home_timeline_gc &&
+	if( !td->timeline_gc &&
 	    g_strcasecmp( set_getstr( &ic->acc->set, "mode" ), "chat" ) == 0 )
 		twitter_groupchat_init( ic );
 
diff --git a/protocols/twitter/twitter_lib.h b/protocols/twitter/twitter_lib.h
index 24b4a08..6ebbdfe 100644
--- a/protocols/twitter/twitter_lib.h
+++ b/protocols/twitter/twitter_lib.h
@@ -77,8 +77,10 @@
 #define TWITTER_BLOCKS_CREATE_URL "/blocks/create/"
 #define TWITTER_BLOCKS_DESTROY_URL "/blocks/destroy/"
 
+void twitter_get_timeline(struct im_connection *ic, gint64 next_cursor);
 void twitter_get_friends_ids(struct im_connection *ic, gint64 next_cursor);
 void twitter_get_home_timeline(struct im_connection *ic, gint64 next_cursor);
+void twitter_get_mentions(struct im_connection *ic, gint64 next_cursor);
 void twitter_get_statuses_friends(struct im_connection *ic, gint64 next_cursor);
 
 void twitter_post_status(struct im_connection *ic, char *msg, guint64 in_reply_to);
